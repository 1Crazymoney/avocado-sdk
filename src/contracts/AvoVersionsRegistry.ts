/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IAvoFeeCollector {
  export type FeeConfigStruct = {
    feeCollector: PromiseOrValue<string>;
    mode: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
  };

  export type FeeConfigStructOutput = [string, number, BigNumber] & {
    feeCollector: string;
    mode: number;
    fee: BigNumber;
  };
}

export interface AvoVersionsRegistryInterface extends utils.Interface {
  functions: {
    "avoFactory()": FunctionFragment;
    "avoForwarderVersions(address)": FunctionFragment;
    "avoMultisigVersions(address)": FunctionFragment;
    "avoWalletVersions(address)": FunctionFragment;
    "calcFee(uint256)": FunctionFragment;
    "feeConfig()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "reinitialize()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requireValidAvoForwarderVersion(address)": FunctionFragment;
    "requireValidAvoMultisigVersion(address)": FunctionFragment;
    "requireValidAvoWalletVersion(address)": FunctionFragment;
    "setAvoForwarderVersion(address,bool)": FunctionFragment;
    "setAvoMultisigVersion(address,bool,bool)": FunctionFragment;
    "setAvoWalletVersion(address,bool,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeConfig((address,uint8,uint88))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "avoFactory"
      | "avoForwarderVersions"
      | "avoMultisigVersions"
      | "avoWalletVersions"
      | "calcFee"
      | "feeConfig"
      | "initialize"
      | "owner"
      | "reinitialize"
      | "renounceOwnership"
      | "requireValidAvoForwarderVersion"
      | "requireValidAvoMultisigVersion"
      | "requireValidAvoWalletVersion"
      | "setAvoForwarderVersion"
      | "setAvoMultisigVersion"
      | "setAvoWalletVersion"
      | "transferOwnership"
      | "updateFeeConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "avoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoForwarderVersions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoMultisigVersions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoWalletVersions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAvoForwarderVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAvoMultisigVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAvoWalletVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvoForwarderVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvoMultisigVersion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvoWalletVersion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeConfig",
    values: [IAvoFeeCollector.FeeConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "avoFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoForwarderVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoMultisigVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoWalletVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAvoForwarderVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAvoMultisigVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAvoWalletVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvoForwarderVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvoMultisigVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvoWalletVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeConfig",
    data: BytesLike
  ): Result;

  events: {
    "FeeConfigUpdated(address,uint8,uint88)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAvoForwarderVersion(address,bool)": EventFragment;
    "SetAvoMultisigVersion(address,bool,bool)": EventFragment;
    "SetAvoWalletVersion(address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAvoForwarderVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAvoMultisigVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAvoWalletVersion"): EventFragment;
}

export interface FeeConfigUpdatedEventObject {
  feeCollector: string;
  mode: number;
  fee: BigNumber;
}
export type FeeConfigUpdatedEvent = TypedEvent<
  [string, number, BigNumber],
  FeeConfigUpdatedEventObject
>;

export type FeeConfigUpdatedEventFilter =
  TypedEventFilter<FeeConfigUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAvoForwarderVersionEventObject {
  avoForwarderVersion: string;
  allowed: boolean;
}
export type SetAvoForwarderVersionEvent = TypedEvent<
  [string, boolean],
  SetAvoForwarderVersionEventObject
>;

export type SetAvoForwarderVersionEventFilter =
  TypedEventFilter<SetAvoForwarderVersionEvent>;

export interface SetAvoMultisigVersionEventObject {
  avoMultisigVersion: string;
  allowed: boolean;
  setDefault: boolean;
}
export type SetAvoMultisigVersionEvent = TypedEvent<
  [string, boolean, boolean],
  SetAvoMultisigVersionEventObject
>;

export type SetAvoMultisigVersionEventFilter =
  TypedEventFilter<SetAvoMultisigVersionEvent>;

export interface SetAvoWalletVersionEventObject {
  avoWalletVersion: string;
  allowed: boolean;
  setDefault: boolean;
}
export type SetAvoWalletVersionEvent = TypedEvent<
  [string, boolean, boolean],
  SetAvoWalletVersionEventObject
>;

export type SetAvoWalletVersionEventFilter =
  TypedEventFilter<SetAvoWalletVersionEvent>;

export interface AvoVersionsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoVersionsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avoFactory(overrides?: CallOverrides): Promise<[string]>;

    avoForwarderVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    avoMultisigVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    avoWalletVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calcFee(
      gasUsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { feeAmount_: BigNumber; feeCollector_: string }
    >;

    feeConfig(overrides?: CallOverrides): Promise<
      [string, number, BigNumber] & {
        feeCollector: string;
        mode: number;
        fee: BigNumber;
      }
    >;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requireValidAvoForwarderVersion(
      avoForwarderVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireValidAvoMultisigVersion(
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireValidAvoWalletVersion(
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setAvoForwarderVersion(
      avoForwarder_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvoMultisigVersion(
      avoMultisig_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvoWalletVersion(
      avoWallet_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeConfig(
      feeConfig_: IAvoFeeCollector.FeeConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  avoFactory(overrides?: CallOverrides): Promise<string>;

  avoForwarderVersions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  avoMultisigVersions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  avoWalletVersions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calcFee(
    gasUsed_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { feeAmount_: BigNumber; feeCollector_: string }
  >;

  feeConfig(overrides?: CallOverrides): Promise<
    [string, number, BigNumber] & {
      feeCollector: string;
      mode: number;
      fee: BigNumber;
    }
  >;

  initialize(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  reinitialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requireValidAvoForwarderVersion(
    avoForwarderVersion_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  requireValidAvoMultisigVersion(
    avoMultisigVersion_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  requireValidAvoWalletVersion(
    avoWalletVersion_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  setAvoForwarderVersion(
    avoForwarder_: PromiseOrValue<string>,
    allowed_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvoMultisigVersion(
    avoMultisig_: PromiseOrValue<string>,
    allowed_: PromiseOrValue<boolean>,
    setDefault_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvoWalletVersion(
    avoWallet_: PromiseOrValue<string>,
    allowed_: PromiseOrValue<boolean>,
    setDefault_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeConfig(
    feeConfig_: IAvoFeeCollector.FeeConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    avoFactory(overrides?: CallOverrides): Promise<string>;

    avoForwarderVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    avoMultisigVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    avoWalletVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calcFee(
      gasUsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { feeAmount_: BigNumber; feeCollector_: string }
    >;

    feeConfig(overrides?: CallOverrides): Promise<
      [string, number, BigNumber] & {
        feeCollector: string;
        mode: number;
        fee: BigNumber;
      }
    >;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    reinitialize(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requireValidAvoForwarderVersion(
      avoForwarderVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requireValidAvoMultisigVersion(
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requireValidAvoWalletVersion(
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvoForwarderVersion(
      avoForwarder_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvoMultisigVersion(
      avoMultisig_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvoWalletVersion(
      avoWallet_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeConfig(
      feeConfig_: IAvoFeeCollector.FeeConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeConfigUpdated(address,uint8,uint88)"(
      feeCollector?: PromiseOrValue<string> | null,
      mode?: PromiseOrValue<BigNumberish> | null,
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeeConfigUpdatedEventFilter;
    FeeConfigUpdated(
      feeCollector?: PromiseOrValue<string> | null,
      mode?: PromiseOrValue<BigNumberish> | null,
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeeConfigUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetAvoForwarderVersion(address,bool)"(
      avoForwarderVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null
    ): SetAvoForwarderVersionEventFilter;
    SetAvoForwarderVersion(
      avoForwarderVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null
    ): SetAvoForwarderVersionEventFilter;

    "SetAvoMultisigVersion(address,bool,bool)"(
      avoMultisigVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null,
      setDefault?: PromiseOrValue<boolean> | null
    ): SetAvoMultisigVersionEventFilter;
    SetAvoMultisigVersion(
      avoMultisigVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null,
      setDefault?: PromiseOrValue<boolean> | null
    ): SetAvoMultisigVersionEventFilter;

    "SetAvoWalletVersion(address,bool,bool)"(
      avoWalletVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null,
      setDefault?: PromiseOrValue<boolean> | null
    ): SetAvoWalletVersionEventFilter;
    SetAvoWalletVersion(
      avoWalletVersion?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null,
      setDefault?: PromiseOrValue<boolean> | null
    ): SetAvoWalletVersionEventFilter;
  };

  estimateGas: {
    avoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    avoForwarderVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoMultisigVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoWalletVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFee(
      gasUsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requireValidAvoForwarderVersion(
      avoForwarderVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireValidAvoMultisigVersion(
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireValidAvoWalletVersion(
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAvoForwarderVersion(
      avoForwarder_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvoMultisigVersion(
      avoMultisig_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvoWalletVersion(
      avoWallet_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeConfig(
      feeConfig_: IAvoFeeCollector.FeeConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoForwarderVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoMultisigVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoWalletVersions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFee(
      gasUsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requireValidAvoForwarderVersion(
      avoForwarderVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireValidAvoMultisigVersion(
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireValidAvoWalletVersion(
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAvoForwarderVersion(
      avoForwarder_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvoMultisigVersion(
      avoMultisig_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvoWalletVersion(
      avoWallet_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      setDefault_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeConfig(
      feeConfig_: IAvoFeeCollector.FeeConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
