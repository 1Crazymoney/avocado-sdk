/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AvoDepositManagerInterface extends utils.Interface {
  functions: {
    "auths(address)": FunctionFragment;
    "avoFactory()": FunctionFragment;
    "depositOnBehalf(address,uint256)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "initialize(address,address,uint96,uint96,uint96)": FunctionFragment;
    "isAuth(address)": FunctionFragment;
    "minWithdrawAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "processWithdraw(bytes32)": FunctionFragment;
    "removeWithdrawRequest(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestSourceWithdraw(uint256)": FunctionFragment;
    "requestWithdraw(uint256)": FunctionFragment;
    "setAuth(address,bool)": FunctionFragment;
    "setMinWithdrawAmount(uint96)": FunctionFragment;
    "setWithdrawAddress(address)": FunctionFragment;
    "setWithdrawFee(uint96)": FunctionFragment;
    "setWithdrawLimit(uint96)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawAddress()": FunctionFragment;
    "withdrawFee()": FunctionFragment;
    "withdrawLimit()": FunctionFragment;
    "withdrawRequests(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auths"
      | "avoFactory"
      | "depositOnBehalf"
      | "depositToken"
      | "initialize"
      | "isAuth"
      | "minWithdrawAmount"
      | "owner"
      | "pause"
      | "paused"
      | "processWithdraw"
      | "removeWithdrawRequest"
      | "renounceOwnership"
      | "requestSourceWithdraw"
      | "requestWithdraw"
      | "setAuth"
      | "setMinWithdrawAmount"
      | "setWithdrawAddress"
      | "setWithdrawFee"
      | "setWithdrawLimit"
      | "transferOwnership"
      | "unpause"
      | "withdraw"
      | "withdrawAddress"
      | "withdrawFee"
      | "withdrawLimit"
      | "withdrawRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auths",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnBehalf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processWithdraw",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWithdrawRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestSourceWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuth",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWithdrawAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "auths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avoFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSourceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetAuth(address,bool)": EventFragment;
    "SetMinWithdrawAmount(uint96)": EventFragment;
    "SetWithdrawAddress(address)": EventFragment;
    "SetWithdrawFee(uint96)": EventFragment;
    "SetWithdrawLimit(uint96)": EventFragment;
    "SourceWithdrawRequested(bytes32,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawProcessed(bytes32,address,uint256,uint256)": EventFragment;
    "WithdrawRemoved(bytes32)": EventFragment;
    "WithdrawRequested(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinWithdrawAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceWithdrawRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRequested"): EventFragment;
}

export interface DepositEventObject {
  sender: string;
  avoSafe: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetAuthEventObject {
  auth: string;
  allowed: boolean;
}
export type SetAuthEvent = TypedEvent<[string, boolean], SetAuthEventObject>;

export type SetAuthEventFilter = TypedEventFilter<SetAuthEvent>;

export interface SetMinWithdrawAmountEventObject {
  minWithdrawAmount: BigNumber;
}
export type SetMinWithdrawAmountEvent = TypedEvent<
  [BigNumber],
  SetMinWithdrawAmountEventObject
>;

export type SetMinWithdrawAmountEventFilter =
  TypedEventFilter<SetMinWithdrawAmountEvent>;

export interface SetWithdrawAddressEventObject {
  withdrawAddress: string;
}
export type SetWithdrawAddressEvent = TypedEvent<
  [string],
  SetWithdrawAddressEventObject
>;

export type SetWithdrawAddressEventFilter =
  TypedEventFilter<SetWithdrawAddressEvent>;

export interface SetWithdrawFeeEventObject {
  withdrawFee: BigNumber;
}
export type SetWithdrawFeeEvent = TypedEvent<
  [BigNumber],
  SetWithdrawFeeEventObject
>;

export type SetWithdrawFeeEventFilter = TypedEventFilter<SetWithdrawFeeEvent>;

export interface SetWithdrawLimitEventObject {
  withdrawLimit: BigNumber;
}
export type SetWithdrawLimitEvent = TypedEvent<
  [BigNumber],
  SetWithdrawLimitEventObject
>;

export type SetWithdrawLimitEventFilter =
  TypedEventFilter<SetWithdrawLimitEvent>;

export interface SourceWithdrawRequestedEventObject {
  id: string;
  user: string;
  amount: BigNumber;
}
export type SourceWithdrawRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  SourceWithdrawRequestedEventObject
>;

export type SourceWithdrawRequestedEventFilter =
  TypedEventFilter<SourceWithdrawRequestedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawProcessedEventObject {
  id: string;
  user: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type WithdrawProcessedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawProcessedEventObject
>;

export type WithdrawProcessedEventFilter =
  TypedEventFilter<WithdrawProcessedEvent>;

export interface WithdrawRemovedEventObject {
  id: string;
}
export type WithdrawRemovedEvent = TypedEvent<
  [string],
  WithdrawRemovedEventObject
>;

export type WithdrawRemovedEventFilter = TypedEventFilter<WithdrawRemovedEvent>;

export interface WithdrawRequestedEventObject {
  id: string;
  avoSafe: string;
  amount: BigNumber;
}
export type WithdrawRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawRequestedEventObject
>;

export type WithdrawRequestedEventFilter =
  TypedEventFilter<WithdrawRequestedEvent>;

export interface AvoDepositManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoDepositManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    avoFactory(overrides?: CallOverrides): Promise<[string]>;

    depositOnBehalf(
      receiver_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      owner_: PromiseOrValue<string>,
      withdrawAddress_: PromiseOrValue<string>,
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processWithdraw(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWithdrawRequest(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestSourceWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuth(
      auth_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinWithdrawAmount(
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawAddress(
      withdrawAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawLimit(
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAddress(overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; amount: BigNumber }>;
  };

  auths(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  avoFactory(overrides?: CallOverrides): Promise<string>;

  depositOnBehalf(
    receiver_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    owner_: PromiseOrValue<string>,
    withdrawAddress_: PromiseOrValue<string>,
    withdrawLimit_: PromiseOrValue<BigNumberish>,
    minWithdrawAmount_: PromiseOrValue<BigNumberish>,
    withdrawFee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuth(
    auth_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processWithdraw(
    withdrawId_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWithdrawRequest(
    withdrawId_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestSourceWithdraw(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestWithdraw(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuth(
    auth_: PromiseOrValue<string>,
    allowed_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinWithdrawAmount(
    minWithdrawAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawAddress(
    withdrawAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    withdrawFee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawLimit(
    withdrawLimit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAddress(overrides?: CallOverrides): Promise<string>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { to: string; amount: BigNumber }>;

  callStatic: {
    auths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoFactory(overrides?: CallOverrides): Promise<string>;

    depositOnBehalf(
      receiver_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    initialize(
      owner_: PromiseOrValue<string>,
      withdrawAddress_: PromiseOrValue<string>,
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processWithdraw(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWithdrawRequest(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestSourceWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    requestWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAuth(
      auth_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWithdrawAmount(
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawAddress(
      withdrawAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawLimit(
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawAddress(overrides?: CallOverrides): Promise<string>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; amount: BigNumber }>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetAuth(address,bool)"(
      auth?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null
    ): SetAuthEventFilter;
    SetAuth(
      auth?: PromiseOrValue<string> | null,
      allowed?: PromiseOrValue<boolean> | null
    ): SetAuthEventFilter;

    "SetMinWithdrawAmount(uint96)"(
      minWithdrawAmount?: PromiseOrValue<BigNumberish> | null
    ): SetMinWithdrawAmountEventFilter;
    SetMinWithdrawAmount(
      minWithdrawAmount?: PromiseOrValue<BigNumberish> | null
    ): SetMinWithdrawAmountEventFilter;

    "SetWithdrawAddress(address)"(
      withdrawAddress?: PromiseOrValue<string> | null
    ): SetWithdrawAddressEventFilter;
    SetWithdrawAddress(
      withdrawAddress?: PromiseOrValue<string> | null
    ): SetWithdrawAddressEventFilter;

    "SetWithdrawFee(uint96)"(
      withdrawFee?: PromiseOrValue<BigNumberish> | null
    ): SetWithdrawFeeEventFilter;
    SetWithdrawFee(
      withdrawFee?: PromiseOrValue<BigNumberish> | null
    ): SetWithdrawFeeEventFilter;

    "SetWithdrawLimit(uint96)"(
      withdrawLimit?: PromiseOrValue<BigNumberish> | null
    ): SetWithdrawLimitEventFilter;
    SetWithdrawLimit(
      withdrawLimit?: PromiseOrValue<BigNumberish> | null
    ): SetWithdrawLimitEventFilter;

    "SourceWithdrawRequested(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): SourceWithdrawRequestedEventFilter;
    SourceWithdrawRequested(
      id?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): SourceWithdrawRequestedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawProcessed(bytes32,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): WithdrawProcessedEventFilter;
    WithdrawProcessed(
      id?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): WithdrawProcessedEventFilter;

    "WithdrawRemoved(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): WithdrawRemovedEventFilter;
    WithdrawRemoved(
      id?: PromiseOrValue<BytesLike> | null
    ): WithdrawRemovedEventFilter;

    "WithdrawRequested(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      avoSafe?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawRequestedEventFilter;
    WithdrawRequested(
      id?: PromiseOrValue<BytesLike> | null,
      avoSafe?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawRequestedEventFilter;
  };

  estimateGas: {
    auths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    depositOnBehalf(
      receiver_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner_: PromiseOrValue<string>,
      withdrawAddress_: PromiseOrValue<string>,
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processWithdraw(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWithdrawRequest(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestSourceWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuth(
      auth_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinWithdrawAmount(
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawAddress(
      withdrawAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawLimit(
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositOnBehalf(
      receiver_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner_: PromiseOrValue<string>,
      withdrawAddress_: PromiseOrValue<string>,
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuth(
      auth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processWithdraw(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWithdrawRequest(
      withdrawId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestSourceWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuth(
      auth_: PromiseOrValue<string>,
      allowed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinWithdrawAmount(
      minWithdrawAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawAddress(
      withdrawAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      withdrawFee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawLimit(
      withdrawLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
