/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AvoAuthoritiesListInterface extends utils.Interface {
  functions: {
    "authorities(address)": FunctionFragment;
    "authoritiesCount(address)": FunctionFragment;
    "avoFactory()": FunctionFragment;
    "avoSafes(address)": FunctionFragment;
    "avoSafesCount(address)": FunctionFragment;
    "isAuthorityOf(address,address)": FunctionFragment;
    "syncAvoAuthorityMappings(address,address[])": FunctionFragment;
    "trackInStorage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorities"
      | "authoritiesCount"
      | "avoFactory"
      | "avoSafes"
      | "avoSafesCount"
      | "isAuthorityOf"
      | "syncAvoAuthorityMappings"
      | "trackInStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorities",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authoritiesCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoSafes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoSafesCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorityOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncAvoAuthorityMappings",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "trackInStorage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authoritiesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avoFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avoSafes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoSafesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncAvoAuthorityMappings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackInStorage",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityMappingAdded(address,address)": EventFragment;
    "AuthorityMappingRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityMappingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityMappingRemoved"): EventFragment;
}

export interface AuthorityMappingAddedEventObject {
  authority: string;
  avoSafe: string;
}
export type AuthorityMappingAddedEvent = TypedEvent<
  [string, string],
  AuthorityMappingAddedEventObject
>;

export type AuthorityMappingAddedEventFilter =
  TypedEventFilter<AuthorityMappingAddedEvent>;

export interface AuthorityMappingRemovedEventObject {
  authority: string;
  avoSafe: string;
}
export type AuthorityMappingRemovedEvent = TypedEvent<
  [string, string],
  AuthorityMappingRemovedEventObject
>;

export type AuthorityMappingRemovedEventFilter =
  TypedEventFilter<AuthorityMappingRemovedEvent>;

export interface AvoAuthoritiesList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoAuthoritiesListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorities(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    authoritiesCount(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    avoFactory(overrides?: CallOverrides): Promise<[string]>;

    avoSafes(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    avoSafesCount(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAuthorityOf(
      avoSafe_: PromiseOrValue<string>,
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    syncAvoAuthorityMappings(
      avoSafe_: PromiseOrValue<string>,
      authorities_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trackInStorage(overrides?: CallOverrides): Promise<[boolean]>;
  };

  authorities(
    avoSafe_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  authoritiesCount(
    avoSafe_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  avoFactory(overrides?: CallOverrides): Promise<string>;

  avoSafes(
    authority_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  avoSafesCount(
    authority_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAuthorityOf(
    avoSafe_: PromiseOrValue<string>,
    authority_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  syncAvoAuthorityMappings(
    avoSafe_: PromiseOrValue<string>,
    authorities_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trackInStorage(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    authorities(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    authoritiesCount(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoFactory(overrides?: CallOverrides): Promise<string>;

    avoSafes(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    avoSafesCount(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorityOf(
      avoSafe_: PromiseOrValue<string>,
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    syncAvoAuthorityMappings(
      avoSafe_: PromiseOrValue<string>,
      authorities_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    trackInStorage(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AuthorityMappingAdded(address,address)"(
      authority?: null,
      avoSafe?: null
    ): AuthorityMappingAddedEventFilter;
    AuthorityMappingAdded(
      authority?: null,
      avoSafe?: null
    ): AuthorityMappingAddedEventFilter;

    "AuthorityMappingRemoved(address,address)"(
      authority?: null,
      avoSafe?: null
    ): AuthorityMappingRemovedEventFilter;
    AuthorityMappingRemoved(
      authority?: null,
      avoSafe?: null
    ): AuthorityMappingRemovedEventFilter;
  };

  estimateGas: {
    authorities(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authoritiesCount(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    avoSafes(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avoSafesCount(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorityOf(
      avoSafe_: PromiseOrValue<string>,
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncAvoAuthorityMappings(
      avoSafe_: PromiseOrValue<string>,
      authorities_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trackInStorage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authorities(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authoritiesCount(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoSafes(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoSafesCount(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorityOf(
      avoSafe_: PromiseOrValue<string>,
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncAvoAuthorityMappings(
      avoSafe_: PromiseOrValue<string>,
      authorities_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trackInStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
