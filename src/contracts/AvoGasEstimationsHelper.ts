/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AvoCoreStructs {
  export type ActionStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    operation: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [string, string, BigNumber, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
    operation: BigNumber;
  };
}

export interface AvoGasEstimationsHelperInterface extends utils.Interface {
  functions: {
    "avoFactory()": FunctionFragment;
    "avoMultiSafeBytecode()": FunctionFragment;
    "avoSafeBytecode()": FunctionFragment;
    "estimateCallTargetsGas(address,(address,bytes,uint256,uint256)[],uint256)": FunctionFragment;
    "estimateCallTargetsGasMultisig(address,(address,bytes,uint256,uint256)[],uint256)": FunctionFragment;
    "estimateCallTargetsGasWithVersion(address,(address,bytes,uint256,uint256)[],uint256,address)": FunctionFragment;
    "estimateCallTargetsGasWithVersionMultisig(address,(address,bytes,uint256,uint256)[],uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "avoFactory"
      | "avoMultiSafeBytecode"
      | "avoSafeBytecode"
      | "estimateCallTargetsGas"
      | "estimateCallTargetsGasMultisig"
      | "estimateCallTargetsGasWithVersion"
      | "estimateCallTargetsGasWithVersionMultisig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "avoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoMultiSafeBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoSafeBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCallTargetsGas",
    values: [
      PromiseOrValue<string>,
      AvoCoreStructs.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCallTargetsGasMultisig",
    values: [
      PromiseOrValue<string>,
      AvoCoreStructs.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCallTargetsGasWithVersion",
    values: [
      PromiseOrValue<string>,
      AvoCoreStructs.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCallTargetsGasWithVersionMultisig",
    values: [
      PromiseOrValue<string>,
      AvoCoreStructs.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "avoFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoMultiSafeBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoSafeBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCallTargetsGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCallTargetsGasMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCallTargetsGasWithVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCallTargetsGasWithVersionMultisig",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AvoGasEstimationsHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoGasEstimationsHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avoFactory(overrides?: CallOverrides): Promise<[string]>;

    avoMultiSafeBytecode(overrides?: CallOverrides): Promise<[string]>;

    avoSafeBytecode(overrides?: CallOverrides): Promise<[string]>;

    estimateCallTargetsGas(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCallTargetsGasMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCallTargetsGasWithVersion(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCallTargetsGasWithVersionMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  avoFactory(overrides?: CallOverrides): Promise<string>;

  avoMultiSafeBytecode(overrides?: CallOverrides): Promise<string>;

  avoSafeBytecode(overrides?: CallOverrides): Promise<string>;

  estimateCallTargetsGas(
    owner_: PromiseOrValue<string>,
    actions_: AvoCoreStructs.ActionStruct[],
    id_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCallTargetsGasMultisig(
    owner_: PromiseOrValue<string>,
    actions_: AvoCoreStructs.ActionStruct[],
    id_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCallTargetsGasWithVersion(
    owner_: PromiseOrValue<string>,
    actions_: AvoCoreStructs.ActionStruct[],
    id_: PromiseOrValue<BigNumberish>,
    avoWalletVersion_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCallTargetsGasWithVersionMultisig(
    owner_: PromiseOrValue<string>,
    actions_: AvoCoreStructs.ActionStruct[],
    id_: PromiseOrValue<BigNumberish>,
    avoMultisigVersion_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    avoFactory(overrides?: CallOverrides): Promise<string>;

    avoMultiSafeBytecode(overrides?: CallOverrides): Promise<string>;

    avoSafeBytecode(overrides?: CallOverrides): Promise<string>;

    estimateCallTargetsGas(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        totalGasUsed_: BigNumber;
        deploymentGasUsed_: BigNumber;
        isAvoSafeDeployed_: boolean;
        success_: boolean;
      }
    >;

    estimateCallTargetsGasMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        totalGasUsed_: BigNumber;
        deploymentGasUsed_: BigNumber;
        isDeployed_: boolean;
        success_: boolean;
      }
    >;

    estimateCallTargetsGasWithVersion(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        totalGasUsed_: BigNumber;
        deploymentGasUsed_: BigNumber;
        isAvoSafeDeployed_: boolean;
        success_: boolean;
      }
    >;

    estimateCallTargetsGasWithVersionMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        totalGasUsed_: BigNumber;
        deploymentGasUsed_: BigNumber;
        isDeployed_: boolean;
        success_: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    avoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    avoMultiSafeBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    avoSafeBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    estimateCallTargetsGas(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCallTargetsGasMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCallTargetsGasWithVersion(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCallTargetsGasWithVersionMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoMultiSafeBytecode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoSafeBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateCallTargetsGas(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCallTargetsGasMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCallTargetsGasWithVersion(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCallTargetsGasWithVersionMultisig(
      owner_: PromiseOrValue<string>,
      actions_: AvoCoreStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      avoMultisigVersion_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
